<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	<!-- MySQL data source -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/news" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>my.spring.security.entity.User</value>
				<value>my.spring.security.entity.Role</value>
				<value>my.spring.security.entity.Category</value>
				<value>my.spring.security.entity.Article</value>
			</list>
		</property>
		 <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
    			<prop key="hibernate.cache.use_query_cache">true</prop>
    			<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
    			<prop key="net.sf.ehcache.configurationResourceName">/ehcache-config.xml</prop>
				<!--<prop key="hibernate.current_session_context_class">thread</prop>  -->
			</props>
		</property>
	</bean>

	<!--Config for User -->
	<bean id="userDAO" class="my.spring.security.impl.UserDAOImpl">
		<constructor-arg name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="userServiceTarget" class="my.spring.security.impl.UserServiceImpl">
		<constructor-arg name="userDAO" ref="userDAO" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Create instance of transaction template for programmatic transaction manipulation -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="userService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target" ref="userServiceTarget">
		</property>
		<property name="transactionAttributes">
			<props>
				<!-- A specific config needed for each method -->
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<!-- <prop key="delete">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop> <prop key="makePersistent">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop> -->
			</props>
		</property>
	</bean>
	
	<!-- Config for Category -->
	<bean id="categoryDAO" class="my.spring.security.impl.CategoryDAOImpl">
		<constructor-arg name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="categoryServiceTarget" class="my.spring.security.impl.CategoryServiceImpl">
		<constructor-arg name="categoryDAO" ref="categoryDAO" />
	</bean>
	
	<bean id="categoryService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target" ref="categoryServiceTarget">
		</property>
		<property name="transactionAttributes">
			<props>
				<!-- A specific config needed for each method -->
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<!-- <prop key="delete">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop> <prop key="makePersistent">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop> -->
			</props>
		</property>
	</bean>
	
	<!--Config for Article -->
	<bean id="articleDAO" class="my.spring.security.impl.ArticleDAOImpl">
		<constructor-arg name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="articleServiceTarget" class="my.spring.security.impl.ArticleServiceImpl">
		<constructor-arg name="articleDAO" ref="articleDAO" />
	</bean>
	<bean id="articleService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target" ref="articleServiceTarget">
		</property>
		<property name="transactionAttributes">
			<props>
				<!-- A specific config needed for each method -->
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<!-- <prop key="delete">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop> <prop key="makePersistent">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop> -->
			</props>
		</property>
	</bean>
	


	<!-- <security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select name,password,enabled from usertest where name=?"
				authorities-by-username-query="select u1.name, u2.name from usertest u1, role u2 where u1.id = u2.userId and u1.name =?" />
		</security:authentication-provider>
	</security:authentication-manager> -->

</beans>